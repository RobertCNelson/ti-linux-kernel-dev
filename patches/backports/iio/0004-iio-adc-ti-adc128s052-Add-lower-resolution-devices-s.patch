From e20a6839413c8b8a18f6610e1430493e0b948de3 Mon Sep 17 00:00:00 2001
From: Nishanth Menon <nm@ti.com>
Date: Thu, 23 Jun 2022 21:58:24 -0500
Subject: [PATCH 4/8] iio: adc: ti-adc128s052: Add lower resolution devices
 support

The adcxx4s communicates with a host processor via an SPI/Microwire Bus
interface. The device family responds with 12bit data, of which the LSB
bits are transmitted by the lower resolution devices as 0. We don't need
to mess with ADC108S102_BITS as a result for the lower resolution
devices.

I have been able to test adc102s051, hence adding just the missing
ones in that family.

Lets reuse the driver to support the family of devices with name
ADC<bb><c>S<sss>, where
* bb is the resolution in number of bits (8, 10, 12)
* c is the number of channels (1, 2, 4, 8)
* sss is the maximum conversion speed (021 for 200 kSPS, 051 for 500 kSPS
  and 101 for 1 MSPS)

Complete datasheets are available at TI's website here:
  https://www.ti.com/lit/gpn/adc<bb><c>s<sss>.pdf

Also see: drivers/hwmon/adcxx.c

Link: https://lore.kernel.org/linux-iio/20220701042919.18180-3-nm@ti.com/
Signed-off-by: Nishanth Menon <nm@ti.com>
---
 drivers/iio/adc/ti-adc128s052.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/drivers/iio/adc/ti-adc128s052.c b/drivers/iio/adc/ti-adc128s052.c
index 8618ae7bc067..25fc6e09610a 100644
--- a/drivers/iio/adc/ti-adc128s052.c
+++ b/drivers/iio/adc/ti-adc128s052.c
@@ -7,6 +7,20 @@
  * https://www.ti.com/lit/ds/symlink/adc128s052.pdf
  * https://www.ti.com/lit/ds/symlink/adc122s021.pdf
  * https://www.ti.com/lit/ds/symlink/adc124s021.pdf
+ *
+ * The adcxx4s communicates with a host processor via an SPI/Microwire Bus
+ * interface. This driver supports the whole family of devices with name
+ * ADC<bb><c>S<sss>, where
+ * bb is the resolution in number of bits (8, 10, 12)
+ * c is the number of channels (1, 2, 4, 8)
+ * sss is the maximum conversion speed (021 for 200 kSPS, 051 for 500 kSPS
+ * and 101 for 1 MSPS)
+ *
+ * Complete datasheets are available at TI's website here:
+ *   https://www.ti.com/lit/gpn/adc<bb><c>s<sss>.pdf
+ *
+ * Handling of 8, 10 and 12 bits converters are the same, the
+ * unavailable bits are 0 in LSB :)
  */
 
 #include <linux/acpi.h>
@@ -197,6 +211,12 @@ static const struct of_device_id adc128_of_match[] = {
 	{ .compatible = "ti,adc122s021", .data = (void*)1L, },
 	{ .compatible = "ti,adc122s051", .data = (void*)1L, },
 	{ .compatible = "ti,adc122s101", .data = (void*)1L, },
+	{ .compatible = "ti,adc102s021", .data = (void*)1L, },
+	{ .compatible = "ti,adc102s051", .data = (void*)1L, },
+	{ .compatible = "ti,adc102s101", .data = (void*)1L, },
+	{ .compatible = "ti,adc082s021", .data = (void*)1L, },
+	{ .compatible = "ti,adc082s051", .data = (void*)1L, },
+	{ .compatible = "ti,adc082s101", .data = (void*)1L, },
 	{ .compatible = "ti,adc124s021", .data = (void*)2L, },
 	{ .compatible = "ti,adc124s051", .data = (void*)2L, },
 	{ .compatible = "ti,adc124s101", .data = (void*)2L, },
@@ -209,6 +229,12 @@ static const struct spi_device_id adc128_id[] = {
 	{ "adc122s021",	1 },
 	{ "adc122s051",	1 },
 	{ "adc122s101",	1 },
+	{ "adc102s021",	1 },
+	{ "adc102s051",	1 },
+	{ "adc102s101",	1 },
+	{ "adc082s021",	1 },
+	{ "adc082s051",	1 },
+	{ "adc082s101",	1 },
 	{ "adc124s021", 2 },
 	{ "adc124s051", 2 },
 	{ "adc124s101", 2 },
-- 
2.39.2

