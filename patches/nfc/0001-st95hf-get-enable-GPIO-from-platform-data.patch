From 5f41bdc65b38bdd1ca6c0a25571df536221fa1bd Mon Sep 17 00:00:00 2001
From: Jason Kridner <jkridner@beagleboard.org>
Date: Sat, 4 Mar 2023 23:22:24 -0500
Subject: [PATCH] st95hf: get enable GPIO from platform data

---
 drivers/nfc/st95hf/core.c | 44 +++++++++++++++++++++++----------------
 1 file changed, 26 insertions(+), 18 deletions(-)

diff --git a/drivers/nfc/st95hf/core.c b/drivers/nfc/st95hf/core.c
index 457854765983..fa9fae0c8494 100644
--- a/drivers/nfc/st95hf/core.c
+++ b/drivers/nfc/st95hf/core.c
@@ -18,6 +18,7 @@
 #include <linux/of.h>
 #include <linux/of_irq.h>
 #include <linux/property.h>
+#include <linux/gpio/consumer.h>
 #include <linux/regulator/consumer.h>
 #include <linux/wait.h>
 #include <net/nfc/digital.h>
@@ -220,7 +221,7 @@ struct st95hf_context {
 	struct st95hf_spi_context spicontext;
 	struct nfc_digital_dev *ddev;
 	struct nfc_dev *nfcdev;
-	unsigned int enable_gpio;
+	struct gpio_desc *enable_gpio;
 	struct st95_digital_cmd_complete_arg complete_cb_arg;
 	struct regulator *st95hf_supply;
 	unsigned char sendrcv_trflag;
@@ -452,19 +453,19 @@ static int st95hf_select_protocol(struct st95hf_context *stcontext, int type)
 static void st95hf_send_st95enable_negativepulse(struct st95hf_context *st95con)
 {
 	/* First make irq_in pin high */
-	gpio_set_value(st95con->enable_gpio, HIGH);
+	gpiod_set_value(st95con->enable_gpio, HIGH);
 
 	/* wait for 1 milisecond */
 	usleep_range(1000, 2000);
 
 	/* Make irq_in pin low */
-	gpio_set_value(st95con->enable_gpio, LOW);
+	gpiod_set_value(st95con->enable_gpio, LOW);
 
 	/* wait for minimum interrupt pulse to make st95 active */
 	usleep_range(1000, 2000);
 
 	/* At end make it high */
-	gpio_set_value(st95con->enable_gpio, HIGH);
+	gpiod_set_value(st95con->enable_gpio, HIGH);
 }
 
 /*
@@ -1071,6 +1072,7 @@ static int st95hf_probe(struct spi_device *nfc_spi_dev)
 
 	struct st95hf_context *st95context;
 	struct st95hf_spi_context *spicontext;
+	unsigned int en_gpio;
 
 	nfc_info(&nfc_spi_dev->dev, "ST95HF driver probe called.\n");
 
@@ -1112,22 +1114,28 @@ static int st95hf_probe(struct spi_device *nfc_spi_dev)
 	 */
 	dev_set_drvdata(&nfc_spi_dev->dev, spicontext);
 
-	st95context->enable_gpio =
-		of_get_named_gpio(nfc_spi_dev->dev.of_node,
-				  "enable-gpio",
-				  0);
-	if (!gpio_is_valid(st95context->enable_gpio)) {
-		dev_err(&nfc_spi_dev->dev, "No valid enable gpio\n");
-		ret = st95context->enable_gpio;
-		goto err_disable_regulator;
+	en_gpio = of_get_named_gpio(nfc_spi_dev->dev.of_node,
+						 "enable-gpio", 0);
+	if (gpio_is_valid(en_gpio)) {
+		st95context->enable_gpio = gpio_to_desc(en_gpio);
+		ret = devm_gpio_request_one(&nfc_spi_dev->dev,
+					    desc_to_gpio(st95context->enable_gpio),
+				    	    GPIOF_DIR_OUT | GPIOF_INIT_HIGH,
+				    	    "enable_gpio");
+		if (ret) {
+			goto err_disable_regulator;
+		}
+	} else {
+		dev_warn(&nfc_spi_dev->dev, "No valid enable gpio found in DT, trying platform data\n");
+		st95context->enable_gpio =
+			devm_gpiod_get_optional(&nfc_spi_dev->dev, "enable", GPIOD_OUT_HIGH);
+		if (!st95context->enable_gpio) {
+			dev_err(&nfc_spi_dev->dev, "No valid enable gpio\n");
+			ret = -EIO;
+			goto err_disable_regulator;
+		}
 	}
 
-	ret = devm_gpio_request_one(&nfc_spi_dev->dev, st95context->enable_gpio,
-				    GPIOF_DIR_OUT | GPIOF_INIT_HIGH,
-				    "enable_gpio");
-	if (ret)
-		goto err_disable_regulator;
-
 	if (nfc_spi_dev->irq > 0) {
 		if (devm_request_threaded_irq(&nfc_spi_dev->dev,
 					      nfc_spi_dev->irq,
-- 
2.39.2

